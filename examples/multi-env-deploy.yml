name: Multi-Environment Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy:
    name: Deploy Studio
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - branch: develop
            environment: development
            dataset: development
            hostname-suffix: dev
          - branch: main
            environment: staging
            dataset: staging
            hostname-suffix: staging
          - branch: main
            environment: production
            dataset: production
            hostname-suffix: ''

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ inputs.environment }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            ENV="development"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            ENV="development"
          else
            ENV="development"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT

          # Set corresponding values
          case $ENV in
            production)
              echo "dataset=production" >> $GITHUB_OUTPUT
              echo "hostname=my-studio" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "dataset=staging" >> $GITHUB_OUTPUT
              echo "hostname=my-studio-staging" >> $GITHUB_OUTPUT
              ;;
            development)
              echo "dataset=development" >> $GITHUB_OUTPUT
              echo "hostname=my-studio-dev" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Sanity
        uses: dcilke/sanity-actions/setup-sanity@v1
        with:
          token: ${{ secrets.SANITY_AUTH_TOKEN }}

      - name: Build and Deploy to ${{ steps.env.outputs.environment }}
        uses: dcilke/sanity-actions/build-and-deploy@v1
        with:
          # Core configuration
          project-id: ${{ secrets.SANITY_PROJECT_ID }}
          dataset: ${{ steps.env.outputs.dataset }}
          token: ${{ secrets.SANITY_DEPLOY_TOKEN }}
          studio-hostname: ${{ steps.env.outputs.hostname }}

          # Build configuration
          build: true
          cache-dependencies: true
          upload-artifacts: ${{ steps.env.outputs.environment == 'production' }}

          # Environment-specific build settings
          source-maps: ${{ steps.env.outputs.environment != 'production' }}
          no-minify: ${{ steps.env.outputs.environment == 'development' }}
          schema-required: ${{ steps.env.outputs.environment == 'production' }}

          # Environment variables
          environment-variables: |
            SANITY_STUDIO_API_DATASET=${{ steps.env.outputs.dataset }}
            SANITY_STUDIO_PROJECT_ID=${{ secrets.SANITY_PROJECT_ID }}
            PUBLIC_ENV=${{ steps.env.outputs.environment }}
            SANITY_STUDIO_API_VERSION=2023-08-01
            ENABLE_PROFILER=${{ steps.env.outputs.environment == 'development' }}

          # GraphQL deployment (production and staging only)
          deploy-graphql: ${{ steps.env.outputs.environment == 'production' || steps.env.outputs.environment == 'staging' }}
          graphql-tag: ${{ steps.env.outputs.environment }}
          graphql-playground: ${{ steps.env.outputs.environment != 'production' }}
          graphql-generation: gen3
          graphql-non-null-document-fields: ${{ steps.env.outputs.environment == 'production' }}

          # Deployment settings
          wait-for-deployment: true
          deployment-timeout: ${{ steps.env.outputs.environment == 'production' && '60' || '30' }}
          comment-on-pr: ${{ github.event_name == 'pull_request' }}

      - name: Export dataset backup (production only)
        if: steps.env.outputs.environment == 'production'
        uses: dcilke/sanity-actions/dataset-export@v1
        with:
          project-id: ${{ secrets.SANITY_PROJECT_ID }}
          dataset: production
          token: ${{ secrets.SANITY_AUTH_TOKEN }}
          output-path: ./backups/production-backup
          compress: true
          upload-artifact: true
          artifact-name: production-backup-${{ github.run_number }}

