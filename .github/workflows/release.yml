name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi

          # Validate version format
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "📝 First release - including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%an)" --reverse)
          else
            echo "📝 Changes since $PREV_TAG"
            COMMITS=$(git log --pretty=format:"- %s (%an)" "$PREV_TAG..HEAD")
          fi

          # Generate changelog
          cat > CHANGELOG_CONTENT.md << EOF
          ## What's Changed

          ### 🚀 Features
          $(echo "$COMMITS" | grep -E "^- (feat|feature):" || echo "- No new features")

          ### 🐛 Bug Fixes
          $(echo "$COMMITS" | grep -E "^- (fix|bugfix):" || echo "- No bug fixes")

          ### 📚 Documentation
          $(echo "$COMMITS" | grep -E "^- (docs|doc):" || echo "- No documentation changes")

          ### 🧪 Tests
          $(echo "$COMMITS" | grep -E "^- (test|tests):" || echo "- No test changes")

          ### 🔧 Maintenance
          $(echo "$COMMITS" | grep -E "^- (chore|refactor|style|perf):" || echo "- No maintenance changes")

          ### All Changes
          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG:-main}...$VERSION
          EOF

          # Set multiline output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_CONTENT.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update action references
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)

          echo "📝 Updating action references to $VERSION..."

          # Update examples to use the new version
          find examples -name "*.yml" -o -name "*.yaml" | while read -r file; do
            sed -i "s|dcilke/sanity-actions/[^@]*@v[0-9]|dcilke/sanity-actions/[^@]*@$MAJOR_VERSION|g" "$file"
            sed -i "s|dcilke/sanity-actions/[^@]*@main|dcilke/sanity-actions/[^@]*@$MAJOR_VERSION|g" "$file"
          done

          # Update README
          sed -i "s|dcilke/sanity-actions/[^@]*@v[0-9]|dcilke/sanity-actions/[^@]*@$MAJOR_VERSION|g" README.md
          sed -i "s|dcilke/sanity-actions/[^@]*@main|dcilke/sanity-actions/[^@]*@$MAJOR_VERSION|g" README.md

      - name: Create release archive
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARCHIVE_NAME="sanity-actions-${VERSION}.tar.gz"

          # Create archive excluding unnecessary files
          tar --exclude='.git' \
              --exclude='node_modules' \
              --exclude='*.log' \
              --exclude='.DS_Store' \
              -czf "$ARCHIVE_NAME" .

          echo "📦 Created release archive: $ARCHIVE_NAME"
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.content }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

      - name: Update major version tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)

          # Update or create major version tag (e.g., v1, v2)
          git tag -fa "$MAJOR_VERSION" -m "Update $MAJOR_VERSION tag to $VERSION"
          git push origin "$MAJOR_VERSION" --force

          echo "✅ Updated major version tag: $MAJOR_VERSION"

      - name: Publish release notification
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          cat > release-notification.md << EOF
          # 🎉 Sanity GitHub Actions $VERSION Released!

          A new version of Sanity GitHub Actions has been released.

          ## Quick Start

          Update your workflows to use the new version:

          \`\`\`yaml
          - uses: dcilke/sanity-actions/build-and-deploy@$VERSION
          \`\`\`

          ## What's New

          See the [release notes](https://github.com/${{ github.repository }}/releases/tag/$VERSION) for details.
          EOF

          echo "📢 Release notification prepared"
