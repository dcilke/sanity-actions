name: Create Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.0, etc.

permissions:
  contents: write  # Need write permission to create releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
          # Explicitly fetch the tag and main branch
          ref: ${{ github.ref }}

      - name: Validate tag is on main branch
        run: |
          echo "üîç Validating tag ${{ github.ref_name }} is on main branch..."

          # Fetch the main branch to ensure we have the latest
          git fetch origin main --force --tags

          # Get the commit SHA that this tag points to
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
          echo "Tag commit: $TAG_COMMIT"

          # Get all commits on main branch
          MAIN_COMMITS=$(git rev-list origin/main)

          # Check if tag commit exists in main branch history
          if echo "$MAIN_COMMITS" | grep -q "^$TAG_COMMIT$"; then
            echo "‚úÖ Tag ${{ github.ref_name }} is on main branch"

            # Additional info
            echo "Tag message:"
            git tag -l --format='%(contents)' ${{ github.ref_name }}
          else
            echo "‚ùå ERROR: Tag ${{ github.ref_name }} is NOT on main branch!"
            echo "This tag points to commit $TAG_COMMIT which is not in main's history."
            echo ""
            echo "To create a release, the tag must be on the main branch."
            echo "You can create a proper tag with:"
            echo "  git checkout main"
            echo "  git pull origin main"
            echo "  git tag -a ${{ github.ref_name }} -m \"Your release message\""
            echo "  git push origin ${{ github.ref_name }}"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Get the previous tag
            let previousTag = '';
            try {
              previousTag = execSync(`git describe --tags --abbrev=0 ${context.ref.replace('refs/tags/', '')}^ 2>/dev/null || echo ""`).toString().trim();
            } catch (e) {
              previousTag = '';
            }

            let changelog = '';

            if (previousTag) {
              console.log(`üìù Generating changelog from ${previousTag} to ${context.ref.replace('refs/tags/', '')}`);

              // Get commits between tags
              const commitRange = `${previousTag}..${context.ref.replace('refs/tags/', '')}`;
              const commits = execSync(`git log ${commitRange} --pretty=format:"%H|%s" --reverse`).toString().trim().split('\n').filter(Boolean);

              // Get commit details with proper GitHub handles
              const commitDetails = [];
              const contributorSet = new Set();

              for (const commit of commits) {
                const [sha, message] = commit.split('|');

                try {
                  // Get commit details from GitHub API
                  const { data: commitData } = await github.rest.repos.getCommit({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: sha
                  });

                  const author = commitData.author?.login ? `@${commitData.author.login}` : commitData.commit.author.name;
                  commitDetails.push(`- ${message} (${author})`);

                  if (commitData.author?.login) {
                    contributorSet.add(`@${commitData.author.login}`);
                  } else {
                    contributorSet.add(commitData.commit.author.name);
                  }
                } catch (e) {
                  // Fallback to git log data if API fails
                  const authorName = execSync(`git log -1 --pretty=format:"%an" ${sha}`).toString().trim();
                  commitDetails.push(`- ${message} (${authorName})`);
                  contributorSet.add(authorName);
                }
              }

              const contributors = Array.from(contributorSet).sort().map(c => `- ${c}`).join('\n');

              const changelogParts = [
                `## What's Changed in ${context.ref.replace('refs/tags/', '')}`,
                '',
                '### Commits',
                commitDetails.join('\n'),
                '',
                '### Contributors',
                contributors,
                '',
                `**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...${context.ref.replace('refs/tags/', '')}`
              ];

              changelog = changelogParts.join('\n');
            } else {
              console.log('üìù First release - no previous tag found');

              const changelogParts = [
                `## Initial Release ${context.ref.replace('refs/tags/', '')}`,
                '',
                'This is the first release of Sanity Actions.',
                '',
                '### Features',
                '- Build and deploy Sanity Studio',
                '- Deploy GraphQL API',
                '- Multi-package manager support (npm, yarn, pnpm)',
                '- GitHub deployment integration',
                '- PR comment automation',
                '- Build artifact uploading'
              ];

              changelog = changelogParts.join('\n');
            }

            // Set output
            core.setOutput('changelog', changelog);

      - name: Create Release
        env:
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        uses: actions/github-script@v7
        with:
          script: |
            const changelog = process.env.CHANGELOG || '';
            const tagName = '${{ github.ref_name }}';
            const isPrerelease = tagName.includes('-alpha') || tagName.includes('-beta') || tagName.includes('-rc');

            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: changelog,
                draft: false,
                prerelease: isPrerelease,
                generate_release_notes: false  // We're providing our own changelog
              });

              console.log(`‚úÖ Release created: ${release.data.html_url}`);
            } catch (error) {
              console.error('Failed to create release:', error);
              throw error;
            }

      - name: Update major version tag
        if: "!contains(github.ref_name, '-')"  # Only for stable releases (no pre-release suffix)
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ github.ref_name }}';
            const majorVersion = tagName.match(/^v\d+/)?.[0];

            if (!majorVersion) {
              console.log(`‚ö†Ô∏è Could not extract major version from tag ${tagName}`);
              return;
            }

            console.log(`üìå Updating major version tag: ${majorVersion}`);

            try {
              // Get the commit SHA of the current tag
              const { data: refData } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });

              const sha = refData.object.sha;

              // Try to update the major version tag
              try {
                await github.rest.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${majorVersion}`,
                  sha: sha,
                  force: true
                });
                console.log(`‚úÖ Major version tag ${majorVersion} updated`);
              } catch (updateError) {
                if (updateError.status === 404) {
                  // Tag doesn't exist, create it
                  await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `refs/tags/${majorVersion}`,
                    sha: sha
                  });
                  console.log(`‚úÖ Major version tag ${majorVersion} created`);
                } else {
                  throw updateError;
                }
              }
            } catch (error) {
              console.error(`‚ùå Failed to update major version tag: ${error.message}`);
              // Don't fail the workflow if major version tag update fails
              console.log('‚ö†Ô∏è Continuing despite major version tag update failure');
            }

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ github.ref_name }}';
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            // Create an issue for failed release
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release failed for tag ${tagName}`,
              body: `The automatic release creation failed for tag \`${tagName}\`.

              Please check the [workflow run](${runUrl}) for details.

              You may need to:
              1. Fix any issues and re-run the workflow
              2. Create the release manually
              3. Update the major version tag manually if needed`,
              labels: ['release', 'bug']
            });