name: "Build and Deploy Sanity"
description: "Build and deploy Sanity Studio and/or GraphQL API with automatic PR preview deployments"
author: "dcilke"
branding:
  icon: "upload-cloud"
  color: "red"

inputs:
  # Required inputs
  token:
    description: "Sanity auth token for deployment"
    required: true

  # Project configuration
  path:
    description: "Path to Sanity studio"
    required: false
    default: "."
  cli-version:
    description: "Version of Sanity CLI to install"
    required: false
    default: ""

  # Build configuration
  build:
    description: "Build the project before deploying"
    required: false
    default: "true"
  studio-output-path:
    description: "Studio build output directory"
    required: false
    default: ""
  studio-source-maps:
    description: "Include Studio source maps in build"
    required: false
    default: "false"
  studio-no-minify:
    description: "Skip Studio bundle minification"
    required: false
    default: "false"
  schema-path:
    description: "Path to schema file"
    required: false
    default: ""
  schema-workspace:
    description: "Name of workspace to generate (defaults to all workspaces)"
    required: false
    default: ""
  schema-enforce-required-fields:
    description: "Makes the schema generated treat fields marked as required as non-optional"
    required: false
    default: "false"
  schema-required:
    description: "Fail if schema is unserializable"
    required: false
    default: "true"

  # Deployment configuration
  deploy-studio:
    description: "Deploy Sanity Studio"
    required: false
    default: "true"
  deploy-graphql:
    description: "Deploy GraphQL API"
    required: false
    default: "false"

  # GraphQL configuration
  graphql-override-tag:
    description: "Override GraphQL tag (PR deployments use branch name)"
    required: false
    default: ""
  graphql-override-dataset:
    description: "Override GraphQL dataset"
    required: false
    default: ""
  graphql-override-playground:
    description: "Override GraphQL playground setting"
    required: false
    default: ""
  graphql-override-generation:
    description: "Override GraphQL generation"
    required: false
    default: ""
  graphql-override-non-null-document-fields:
    description: "Override non-null document fields setting"
    required: false
    default: ""
  graphql-override-with-union-cache:
    description: "Experimental: Enable union cache"
    required: false
    default: ""

  # CI/CD features
  cache-dependencies:
    description: "Cache package manager dependencies"
    required: false
    default: "true"
  cache-sanity-cli:
    description: "Emit cache metadata for the local Sanity CLI install"
    required: false
    default: "false"
  upload-artifacts:
    description: "Upload build artifacts"
    required: false
    default: "false"
  artifact-name:
    description: "Name for uploaded artifacts"
    required: false
    default: "sanity-build"
  comment-on-pr:
    description: "Comment deployment details on PR"
    required: false
    default: "true"
  create-github-deployment:
    description: "Create GitHub deployment records"
    required: false
    default: "true"

  # Advanced options
  github-token:
    description: "GitHub token for PR comments and deployments"
    required: false
    default: ${{ github.token }}
  environment-variables:
    description: "Environment variables in KEY=value format"
    required: false
    default: ""

outputs:
  # Build outputs
  build-path:
    description: "Path to built files"
    value: ${{ steps.build-and-deploy.outputs.dist }}

  # Studio outputs
  studio-url:
    description: "Deployed Studio URL"
    value: ${{ steps.build-and-deploy.outputs.studio-url }}

  # GraphQL outputs
  graphql-urls:
    description: "GraphQL API endpoints"
    value: ${{ steps.build-and-deploy.outputs.graphql-urls }}

  # PR deployment outputs
  deployment-id:
    description: "PR deployment ID (if in PR context)"
    value: ${{ steps.build-and-deploy.outputs.deployment_id }}
  is-preview-deployment:
    description: "Whether this is a preview (PR) deployment"
    value: ${{ steps.build-and-deploy.outputs.is_pr }}

runs:
  using: "composite"
  steps:
    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "lts/*"

    # Install action dependencies
    - name: Install action dependencies
      shell: bash
      run: |
        cd ${{ github.action_path }}/..
        npm install --production --no-save

    # Detect package manager
    - name: Detect package manager
      id: package-manager
      shell: bash
      env:
        INPUT_PATH: ${{ inputs.path }}
      run: |
        cd ${{ inputs.path }}
        node ${{ github.action_path }}/../src/cmd/set-package-manager.js

    # Setup package manager
    - name: Setup pnpm
      if: steps.package-manager.outputs.manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Corepack
      if: steps.package-manager.outputs.manager == 'yarn'
      shell: bash
      run: |
        cd ${{ inputs.path }}
        corepack enable

    # Cache dependencies
    - name: Cache dependencies
      if: inputs.cache-dependencies == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.path }}/node_modules
        key: ${{ runner.os }}-${{ steps.package-manager.outputs.manager }}-${{ hashFiles(format('{0}/**/package-lock.json', inputs.path), format('{0}/**/yarn.lock', inputs.path), format('{0}/**/pnpm-lock.yaml', inputs.path)) }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.package-manager.outputs.manager }}-

    - name: Cache Sanity CLI
      if: inputs.cache-sanity-cli == 'true' && inputs.cli-version != ''
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.sanity-cli
        key: ${{ runner.os }}-sanity-cli-${{ steps.package-manager.outputs.manager }}-${{ inputs.cli-version != '' && inputs.cli-version || 'latest' }}
        restore-keys: |
          ${{ runner.os }}-sanity-cli-${{ steps.package-manager.outputs.manager }}-

    # Build and deploy
    - name: Build and deploy
      id: build-and-deploy
      shell: bash
      env:
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_CLI_VERSION: ${{ inputs.cli-version }}
        INPUT_BUILD: ${{ inputs.build }}
        INPUT_STUDIO_OUTPUT_PATH: ${{ inputs.studio-output-path }}
        INPUT_STUDIO_SOURCE_MAPS: ${{ inputs.studio-source-maps }}
        INPUT_STUDIO_NO_MINIFY: ${{ inputs.studio-no-minify }}
        INPUT_SCHEMA_PATH: ${{ inputs.schema-path }}
        INPUT_SCHEMA_WORKSPACE: ${{ inputs.schema-workspace }}
        INPUT_SCHEMA_ENFORCE_REQUIRED_FIELDS: ${{ inputs.schema-enforce-required-fields }}
        INPUT_SCHEMA_REQUIRED: ${{ inputs.schema-required }}
        INPUT_DEPLOY_STUDIO: ${{ inputs.deploy-studio }}
        INPUT_DEPLOY_GRAPHQL: ${{ inputs.deploy-graphql }}
        INPUT_GRAPHQL_OVERRIDE_TAG: ${{ inputs.graphql-override-tag }}
        INPUT_GRAPHQL_OVERRIDE_DATASET: ${{ inputs.graphql-override-dataset }}
        INPUT_GRAPHQL_OVERRIDE_PLAYGROUND: ${{ inputs.graphql-override-playground }}
        INPUT_GRAPHQL_OVERRIDE_GENERATION: ${{ inputs.graphql-override-generation }}
        INPUT_GRAPHQL_OVERRIDE_NON_NULL_DOCUMENT_FIELDS: ${{ inputs.graphql-override-non-null-document-fields }}
        INPUT_GRAPHQL_OVERRIDE_WITH_UNION_CACHE: ${{ inputs.graphql-override-with-union-cache }}
        INPUT_CACHE_DEPENDENCIES: ${{ inputs.cache-dependencies }}
        INPUT_CACHE_SANITY_CLI: ${{ inputs.cache-sanity-cli }}
        INPUT_UPLOAD_ARTIFACTS: ${{ inputs.upload-artifacts }}
        INPUT_ARTIFACT_NAME: ${{ inputs.artifact-name }}
        INPUT_COMMENT_ON_PR: ${{ inputs.comment-on-pr }}
        INPUT_CREATE_GITHUB_DEPLOYMENT: ${{ inputs.create-github-deployment }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_ENVIRONMENT_VARIABLES: ${{ inputs.environment-variables }}
      run: |
        cd ${{ inputs.path }}
        node ${{ github.action_path }}/../src/cmd/build-and-deploy.js

    # Upload artifacts
    - name: Upload build artifacts
      if: |
        inputs.upload-artifacts == 'true' &&
        inputs.build == 'true' &&
        steps.build-studio.outputs.path != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ steps.build-and-deploy.outputs.dist }}
