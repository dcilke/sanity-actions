name: "Build and Deploy Sanity"
description: "Build and deploy Sanity Studio and/or GraphQL API with automatic PR preview deployments"
author: "dcilke"
branding:
  icon: "upload-cloud"
  color: "red"

inputs:
  # Required inputs
  token:
    description: "Sanity auth token for deployment"
    required: true

  # Project configuration
  path:
    description: "Path to Sanity studio"
    required: false
    default: "."
  cli_version:
    description: "Version of Sanity CLI to install"
    required: false
    default: ""

  # Build configuration
  build:
    description: "Build the project before deploying"
    required: false
    default: "true"
  studio_output_path:
    description: "Studio build output directory"
    required: false
    default: ""
  studio_source_maps:
    description: "Include Studio source maps in build"
    required: false
    default: "false"
  studio_no_minify:
    description: "Skip Studio bundle minification"
    required: false
    default: "false"
  schema_path:
    description: "Path to schema file"
    required: false
    default: ""
  schema_workspace:
    description: "Name of workspace to generate (defaults to all workspaces)"
    required: false
    default: ""
  schema_enforce_required_fields:
    description: "Makes the schema generated treat fields marked as required as non-optional"
    required: false
    default: "false"
  schema_required:
    description: "Fail if schema is unserializable"
    required: false
    default: "true"

  # Deployment configuration
  studio_deploy:
    description: "Deploy Sanity Studio"
    required: false
    default: "true"
  graphql_deploy:
    description: "Deploy GraphQL API"
    required: false
    default: "false"

  # GraphQL configuration
  graphql_override_tag:
    description: "Override GraphQL tag (PR deployments use branch name)"
    required: false
    default: ""
  graphql_override_dataset:
    description: "Override GraphQL dataset"
    required: false
    default: ""
  graphql_override_playground:
    description: "Override GraphQL playground setting"
    required: false
    default: ""
  graphql_override_generation:
    description: "Override GraphQL generation"
    required: false
    default: ""
  graphql_override_non_null_document_fields:
    description: "Override non-null document fields setting"
    required: false
    default: ""
  graphql_override_with_union_cache:
    description: "Experimental: Enable union cache"
    required: false
    default: ""

  # CI/CD features
  cache_dependencies:
    description: "Cache package manager dependencies"
    required: false
    default: "true"
  cache_sanity_cli:
    description: "Emit cache metadata for the local Sanity CLI install"
    required: false
    default: "false"
  upload_artifacts:
    description: "Upload build artifacts"
    required: false
    default: "false"
  artifact_name:
    description: "Name for uploaded artifacts"
    required: false
    default: "sanity-build"
  comment_on_pr:
    description: "Comment deployment details on PR"
    required: false
    default: "true"
  create_github_deployment:
    description: "Create GitHub deployment records"
    required: false
    default: "true"

  # Advanced options
  github_token:
    description: "GitHub token for PR comments and deployments"
    required: false
    default: ${{ github.token }}
  environment_variables:
    description: "Environment variables in KEY=value format"
    required: false
    default: ""

outputs:
  # Build outputs
  build_path:
    description: "Path to built files"
    value: ${{ steps.build-and-deploy.outputs.dist }}

  # Studio outputs
  studio_url:
    description: "Deployed Studio URL"
    value: ${{ steps.build-and-deploy.outputs.studio_url }}

  # GraphQL outputs
  graphql_urls:
    description: "GraphQL API endpoints"
    value: ${{ steps.build-and-deploy.outputs.graphql_urls }}

  # PR deployment outputs
  deployment_id:
    description: "PR deployment ID (if in PR context)"
    value: ${{ steps.build-and-deploy.outputs.deployment_id }}
  is_preview_deployment:
    description: "Whether this is a preview (PR) deployment"
    value: ${{ steps.build-and-deploy.outputs.is_pr }}

runs:
  using: "composite"
  steps:
    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "lts/*"

    # Install action dependencies
    - name: Install action dependencies
      shell: bash
      run: |
        cd ${{ github.action_path }}/..
        npm install --production --no-save

    # Detect package manager
    - name: Detect package manager
      id: package-manager
      shell: bash
      env:
        INPUT_PATH: ${{ inputs.path }}
      run: |
        cd ${{ inputs.path }}
        node ${{ github.action_path }}/../src/cmd/set-package-manager.js

    # Setup package manager
    - name: Setup pnpm
      if: steps.package-manager.outputs.manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Setup Corepack
      if: steps.package-manager.outputs.manager == 'yarn'
      shell: bash
      run: |
        cd ${{ inputs.path }}
        corepack enable

    # Cache dependencies
    - name: Cache dependencies
      if: inputs.cache_dependencies == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.path }}/node_modules
        key: ${{ runner.os }}-${{ steps.package-manager.outputs.manager }}-${{ hashFiles(format('{0}/**/package-lock.json', inputs.path), format('{0}/**/yarn.lock', inputs.path), format('{0}/**/pnpm-lock.yaml', inputs.path)) }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.package-manager.outputs.manager }}-

    - name: Cache Sanity CLI
      if: inputs.cache_sanity_cli == 'true' && inputs.cli_version != ''
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.sanity-cli
        key: ${{ runner.os }}-sanity-cli-${{ steps.package-manager.outputs.manager }}-${{ inputs.cli_version != '' && inputs.cli_version || 'latest' }}
        restore-keys: |
          ${{ runner.os }}-sanity-cli-${{ steps.package-manager.outputs.manager }}-

    # Build and deploy
    - name: Build and deploy
      id: build-and-deploy
      shell: bash
      env:
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_CLI_VERSION: ${{ inputs.cli_version }}
        INPUT_BUILD: ${{ inputs.build }}
        INPUT_STUDIO_OUTPUT_PATH: ${{ inputs.studio_output_path }}
        INPUT_STUDIO_SOURCE_MAPS: ${{ inputs.studio_source_maps }}
        INPUT_STUDIO_NO_MINIFY: ${{ inputs.studio_no_minify }}
        INPUT_SCHEMA_PATH: ${{ inputs.schema_path }}
        INPUT_SCHEMA_WORKSPACE: ${{ inputs.schema_workspace }}
        INPUT_SCHEMA_ENFORCE_REQUIRED_FIELDS: ${{ inputs.schema_enforce_required_fields }}
        INPUT_SCHEMA_REQUIRED: ${{ inputs.schema_required }}
        INPUT_STUDIO_DEPLOY: ${{ inputs.studio_deploy }}
        INPUT_GRAPHQL_DEPLOY: ${{ inputs.graphql_deploy }}
        INPUT_GRAPHQL_OVERRIDE_TAG: ${{ inputs.graphql_override_tag }}
        INPUT_GRAPHQL_OVERRIDE_DATASET: ${{ inputs.graphql_override_dataset }}
        INPUT_GRAPHQL_OVERRIDE_PLAYGROUND: ${{ inputs.graphql_override_playground }}
        INPUT_GRAPHQL_OVERRIDE_GENERATION: ${{ inputs.graphql_override_generation }}
        INPUT_GRAPHQL_OVERRIDE_NON_NULL_DOCUMENT_FIELDS: ${{ inputs.graphql_override_non_null_document_fields }}
        INPUT_GRAPHQL_OVERRIDE_WITH_UNION_CACHE: ${{ inputs.graphql_override_with_union_cache }}
        INPUT_CACHE_DEPENDENCIES: ${{ inputs.cache_dependencies }}
        INPUT_CACHE_SANITY_CLI: ${{ inputs.cache_sanity_cli }}
        INPUT_UPLOAD_ARTIFACTS: ${{ inputs.upload_artifacts }}
        INPUT_ARTIFACT_NAME: ${{ inputs.artifact_name }}
        INPUT_COMMENT_ON_PR: ${{ inputs.comment_on_pr }}
        INPUT_CREATE_GITHUB_DEPLOYMENT: ${{ inputs.create_github_deployment }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_ENVIRONMENT_VARIABLES: ${{ inputs.environment_variables }}
      run: |
        cd ${{ inputs.path }}
        node ${{ github.action_path }}/../src/cmd/build-and-deploy.js

    # Upload artifacts
    - name: Upload build artifacts
      if: |
        inputs.upload_artifacts == 'true' &&
        inputs.build == 'true' &&
        steps.build-studio.outputs.path != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ steps.build-and-deploy.outputs.dist }}
